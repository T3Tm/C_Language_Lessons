조건문,반복문 들어가기 전


알고리즘의 3가지 구조
1. 순차 구조  => 다른 것 없이 위에서 부터 순차적으로 실행
2. 선택 구조  => if 조건에 의해 케이스가 나뉘는 것
3. 반복 구조  => for , while 을 통해 구조가 동일하게 반복 되는 것

오늘 배우는 조건문, 반복문은 알고리즘의 종류이다.

모든 프로그램에는 알고리즘이 들어가 있다!
알고리즘은 일종의 절차이다.
이런 알고리즘에는 3가지 구조가 있다.
1. 순차 구조 => 다른 것 없이 위에서 부터 순차적으로 실행된다.
2. 선택 구조 => if 조건에 의해 케이스가 나뉘는 것을 말합니다.
3. 반복 구조 => for, while , do while에 의해 구조가 동일하게 반복 되는 것입니다.


알고리즘 3구조 중 오늘은 2번과 3번에 대해서 배울 것이다.
1번에 해당하는 순차 구조 같은 경우 이미 해봤습니다.

저희는 제가 실습 문제를 냈을 때마다 이미 프로그램을 작성하신 거예요!

이게 무슨 말이냐면 당장 어제를 예시로 들어드리겠습니다.

어제 같은 경우 거스름돈 문제를 내드렸어요!
정말로 그런 프로그램을 만든다고 하신다면 많은 다른 작업도 하실 거예요.
예를 들어 입력 창을 새로 만들어서 입력칸을 만들어준다거나, 또는 더욱 꾸미게 될 것입니다.

하지만 그거와는 다르게 프로그램이 동작하는 주축이 되는 부분이 바로 알고리즘입니다.

어제와 같은 경우는 순차 구조를 이용해서 계산을 한 뒤에 출력을 해보았지요?
자신이 기술한 코드에 의해 순서대로 실행이 되는 것을 보았습니다.

그렇기에 이미 경험을 해보셨다는 거예요!

그럼 오늘은 2번과 3번인 선택구조와 반복구조에 대해서 배워보겠습니다.

1.조건문 이란 제어문의 일종으로 프로그램의 동작이 단순하지 않도록 가짓수가 나뉘는 것을 말합니다!
예를 들어) 내가 만약 100만원을 모은다면 컴퓨터를 사고 그러지 못하고 50만원만 모은다면 시계를 살 것이고
10만원도 모으지 못한다면 계속 돈을 모아야 겠어 생각했다고 해보겠습니다.


그럼 여기서는 가짓수가 총 몇 개로 나뉜 거죠?

맞습니다 총 3개로 나뉜 겁니다.
생각해보시면 100만원을 모아서 컴퓨터를 샀다면 시계를 사는 결과를 경험할 수 있을까요?
또는 돈을 계속 모아야 된다는 생각을 할 수 있을까요?

맞습니다 없으실 거예요.

이런 식으로 if문은 가짓수를 나눠서 그 상황에 맞게 프로그램을 흘러가게 하는 알고리즘 입니다!

c언어에서는 if문은 그럼 어떻게 작성을 하냐?

if(조건){//조건이 참일때
    문장1;
    문장2;
}
이런식으로 기술하게 됩니다.

if에 있는 조건이 참일 때 안에 있는 문장1, 문장2를 실행하게 됩니다.
하지만 이런 1개의 if문은 다소 단순할 수 있습니다.
그럼 다음 예문을 보겠습니다.
if(키 > 180){//
    printf("키가 180보다 크군요!");
}
else{
    printf("키가 180보다 작거나 같으시군요!");
}
이번에는 if문만 있는 것이 아닌 else까지 합쳐져서 if-else문이 되었습니다.
if else 같은 경우 어떻게 되냐면
예문만 보고 추측할 수 있는 사람 있을까요?

맞습니다! if else 같은 경우 if의 조건에 해당되지 않는 모든 조건들이 else로 빠지게 됩니다.

수직선에서 180보다 크다의 집합이 if에 빠지게 된다면 그에 반대로 else은 180보다 작거나 같은 부분의 집합일 겁니다.

여기서 매우 중요한 점은 else에는 다른 조건을 적지 않는 다는 거예요! 꼭 기억해주세요
else에는 다른 조건을 적지 않습니다. 절대 기술하지 않습니다.


그럼 다음 예문을 보겠습니다.
if (키 > 185){
    printf("키가 매우 크시군요!?");
}else if(키 >175){
    printf("키가 크네요!");
}else{
    printf("어...");
}
이런 예문이 있다고 해봅시다.
이 예문을 보고 추측할 수 있는 사람 있을까요?

맞습니다!
이번 예문은
if-else if-else 입니다.
위 와 같은 예문일 떄는 if문에 조건을 보고 거짓이라면 아래 있는 else if의 조건을 확인하고 그 마저도 거짓이라면 
마지막으로 else로 빠져서 else에 있는 문장들을 실행하게 됩니다.

그럼 다음 예문을 질문 해보겠습니다.
1.
if(조건){

}
if(조건){

}
2.
if(조건){

}
else if(조건){

}
1번과 2번 차이점을 설명할 수 있다. 있으실까요?



조건문 실습 문제)

1) 주사위 3개가 있습니다. 다음과 같은 규칙에 따라 상금을 받습니다.
주사위 3개를 입력 받아서 다음 조건을 만족 시키는 프로그램을 만드세요!

1. 주사위 3개가 같은 눈이 나오면 10000+(같은 눈) * 1000원
2. 같은 눈이 2개면 1000+(같은 눈)*100 원
3. 모두 다른 눈이 나오면 (3개중 가장 큰 눈)*100원

예) 주사위가 3,3,6 이라면 


2번에 해당하므로 1000+ 3*100 => 1300원을 상금으로 받습니다.

2)지금 요리를 하고 있습니다. 시계는 0시부터 24시까지 라고 합시다.
요리는 30분 뒤에 끝이 납니다. 현재 시간을 시각과 분을 공백으로 분리해서 입력 받고 30분이 지난 시간을
출력해주세요!


입력 예) 23 30

출력 예) 0 0



그 다음으로는 switch 구문이 있습니다.
switch는 이런 식으로 씁니다.
switch(변수){
    case 케이스1:
        문장;
        문장2;
        break;
    case 케이스2:
        문장1;
        문장2;
        break;
    default:
        문장1;
        break;
}

if문 switch로 바꿔서 쓸 수 있습니다. 예를 들어)

int main(){
    int number;
    if(number == 0)printf("0이구나");
    else if(number == 1)printf("1이구나");
    else if(number==2)printf("2이 구나!");
}

이것을 switch로 바꾸면 아래와 같이 쓸 수 있겠죠?
int main(){
    int number;
    switch(number){
        case 0:
            printf("0");
            break;
        case 1:
            printf("1");
            break;
        case 2:
            printf("2");
            break;
    }
}

개인적으로 switch와 if문이 있지만 저는 switch는 많이 쓰지는 않았던 것 같습니다.

이 정도로 하셨으면 조건문은 된 것 같으니 다음으로 넘어가겠습니다.
2.반복문
반복문은 알고리즘의 3구조 중 반복구조에 해당하는 것입니다. 제어문에 일종인데요.

반복문에 사용되는 구문은 for,while,do while이 있습니다.

반복문을 사용하는 이유
    불필요한 코드의 반복을 줄이기 위함이다!

그러면 반복문에는 어떤 것이 있냐? 크게는 while, for구문이 있다!

둘은 같은 반복문이지만 쓰는 방식과 사용하는 상황에서 차이가 있다.

while문을 먼저 보자

while문 같은 경우
while(조건){//반복하고 싶은 문장 기술
    문장1;
    문장2;
}
이런식으로 쓰게 된다.
조건이 참일 경우에 아래에 있는 문장들을 반복하게 된다!

보기에 엄청 간단해 보이지만 막상 작성하려고 하면 힘들다.

while의 순서는 이러하다.
1. while 조건을 확인한다
2. 참이면 while문 안에 있는 문장들을 한 번씩 실행한다.
3. 모두 실행하였다면 1번으로 돌아간다.

이렇게 진행된다.

주의 해야 되는 것은 while의 반복이 무한대로 진행될 수 있기 때문에 종료 조건을 잘 설정해 두어야 한다는 것이다!

실습 문제로 만약 입력이 무한정으로 들어온다고 생각해 봅시다.

그랬을 때 코드를 어떻게 짜야할까요? EOF라고 한다.

scanf("%d")를 이용해서 EOF를 걸러줄 수 있다.

while과 비슷하지만 약간 다른 do while도 있다.

do while은
do{

}while(조건);
이런식으로 기술하게 되는데, do라는 문장이 들어가서 무조건 한 번은 실행하게 됩니다. 그리고 while의 조건을
확인한 뒤에 참이면 다시 반복하게 됩니다.
즉 순서가
1. 한 번 실행한다.
2. 조건 확인
3. 반복한다.
가 되겠네요.

이로써 조건이 참일 때 반복을 도는 while문과 do while에 대해서 배워봤습니다.

그 다음은 for문을 배워보겠습니다

for문 같은 경우는
3가지를 아셔야 하는데요.
1. 초기식
2. 증감식 
3. 종료식
이 3가지만 알고 있으시면 됩니다.
for문은 다음과 같이 기술하시면 됩니다.
for(초기식;종료식;증감식){
    문장1;
    문장2;
}
이런식으로 보시면 됩니다.

순서는
1. 초기식을 먼저 설정하게 됩니다.
2. 종료식을 보고 종료가 되는지 확인합니다.
3. 종료가 되지 않는다면 아랫문장들을 한 번씩 실행합니다.
4. 증감식을 실행합니다.
5. 2번으로 돌아갑니다.

보통은 
for(int i=0;i<5;i++){

}
이런 식으로 많이 쓰게 되구요.
저렇게 초기식에서 변수를 선언해서 쓸 수 있습니다.
하지만 저렇게 for문에서 선언한 변수는 for문이 끝나고 나면 할당됐던 메모리가 해제가 되고 외부에서는 i를
접근 조차 할 수 없습니다!.

for문 같은 경우도 종료식을 적어주지 않는다면 무한으로 돌 수 있기 때문에 종료식을 잘 적어주셔야 됩니다!

반복문은 이중 반복문, 삼중 반복문을 쓸 수도 있는데 썻을 때 어떤 식으로 동작이 되는지 정확히 잘 판단해야 된다.

for문 같은 경우는 반복 횟수가 정해져 있을 때 쓰면 좋다.



break, continue,goto문

break는 반복 종료할 때 씀.
continue는 아랫문장을 확인하지 않고 조건을 다시 확인함.

goto는 건너띄게 된다.


실습문제)
별을 찍어주세요.